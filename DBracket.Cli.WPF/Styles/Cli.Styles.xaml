<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:tb="http://www.hardcodet.net/taskbar"
                    xmlns:ui="clr-namespace:DBracket.Cli.WPF.UI"
                    xmlns:controls="clr-namespace:DBracket.Cli.WPF.Controls">

    <!--  The taskbar context menu - the first row is a dummy to show off simple data binding  -->
    <!--
        The "shared" directive is needed if we reopen the sample window a few times - WPF will otherwise
        reuse the same context menu (which is a resource) again (which will have its DataContext set to the old TaskbarIcon)
    -->
    <ContextMenu x:Shared="false"
                 x:Key="SysTrayMenu">
        <MenuItem Header="Show Window"
                  Command="{Binding Commands}"
                  CommandParameter="ShowWindow" />
        <MenuItem Header="Hide Window"
                  Command="{Binding Commands}"
                  CommandParameter="HideWindow" />
        <Separator />
        <MenuItem Header="Exit"
                  Command="{Binding Commands}"
                  CommandParameter="ExitApplication" />
    </ContextMenu>

    <tb:TaskbarIcon x:Key="NotifyIcon"
                    ToolTipText="Left-click to show window, right-click for menu"
                    LeftClickCommand="{Binding Commands}"
                    LeftClickCommandParameter="ShowWindow"
                    NoLeftClickDelay="True"
                    ContextMenu="{StaticResource SysTrayMenu}">
        <tb:TaskbarIcon.IconSource>
            <tb:GeneratedIconSource Text="❤️"
                                    Foreground="Red"
                                    FontFamily="Segoe UI Emoji"
                                    Background="AliceBlue"
                                    FontWeight="Bold"
                                    FontSize="38" />
        </tb:TaskbarIcon.IconSource>
        <!--  self-assign a data context (could also be done programmatically)  -->
        <tb:TaskbarIcon.DataContext>
            <ui:NotifyIconViewModel />
        </tb:TaskbarIcon.DataContext>
    </tb:TaskbarIcon>

    <Style x:Key="QuickAcces.Window.Style"
           TargetType="{x:Type controls:CliWindow}">
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome ResizeBorderThickness="5"
                              CaptionHeight="0"
                              CornerRadius="0"
                              GlassFrameThickness="3"
                              UseAeroCaptionButtons="False" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:CliWindow}">
                    <Border CornerRadius="0"
                            Margin="0,0,-8,0"
                            Background="#1E2025"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <!--Margin="{TemplateBinding WindowState, Converter={StaticResource WindowStateToMarginConv}}">-->
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>

                            <!--TitleBar-->
                            <Grid x:Name="PART_TitleBarRoot"
                                  Visibility="Collapsed"
                                  Height="80">
                                <!--<ContentPresenter Content="{TemplateBinding TitleBarContent}" />-->

                                <Border x:Name="PART_DragableTitleBar"
                                        Background="Yellow" />
                                <!--<Thumb x:Name="PART_DragableTitleBar"
                                              Background="Yellow"
                                              Style="{StaticResource SliderThumbStyle}" />-->

                                <!--<ContentPresenter Content="{TemplateBinding TitleBarInteractiveContent}" />-->
                            </Grid>

                            <!--WindowContent-->
                            <AdornerDecorator Grid.Row="1">
                                <ContentPresenter />
                            </AdornerDecorator>

                            <ResizeGrip x:Name="WindowResizeGrip"
                                        Grid.RowSpan="2"
                                        HorizontalAlignment="Right"
                                        VerticalAlignment="Bottom"
                                        IsTabStop="False"
                                        UseLayoutRounding="True"
                                        Visibility="Hidden" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsActive"
                                    Value="True">
                               <Setter TargetName="PART_TitleBarRoot"
                                       Property="Background"
                                       Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TitleBarActiveBackground}" />
                           </Trigger>
                           <Trigger Property="IsActive"
                                    Value="False">
                               <Setter TargetName="PART_TitleBarRoot"
                                       Property="Background"
                                       Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TitleBarInActiveBackground}" />
                           </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Popup x:Key="AutoCompletePopup">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <TextBlock Text="{Binding CurrentError}"
                       Foreground="Red"
                       FontSize="10" />

            <ListBox Grid.Row="2"
                     ItemsSource="{Binding Suggestions}"
                     SelectedItem="{Binding SelectedSuggestion}"
                     DisplayMemberPath="SuggestedSolution"
                     Width="400"
                     Height="300" />
        </Grid>
    </Popup>

</ResourceDictionary>